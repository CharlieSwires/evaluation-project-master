openapi: 3.0.0
info:
  title: Evaluation Project
  description: Evaluation Project Specification
  contact: {}
  version: '1.0.0'

paths:

  /volume:
    post:
      summary: Calculate volume
      description: Calculate total volume of boxes
      operationId: calculateVolume
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VolumeRequest'
        required: true
      responses:
        200:
          description: "Total volume"
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/VolumeResponse'
        400:
          description: "Client error"
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorResponse'
        500:
          description: "Server error"
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorResponse'
components:
  schemas:

    VolumeRequest:
      type: object
      description: 'Calculates total volume of boxes'
      required:
        - box
      properties:
        box:
          type: 'array'
          minItems: 1
          items:
            $ref: '#/components/schemas/Box'
      # TODO add a new JUnit test that runs the volume calculator service with this example:
      example: {
        "boxes": [
           {
             "width": 190.1,
             "height": 100.2,
             "depth": 250.3
           },
           {
             "width": 50.0,
             "height": 60.0,
             "depth": 70.0
           }
        ]
      }

    # TODO Advanced: Enhance the service to accept specified a specified unit of length (mm, cm, m) and
    #  request a specific unit of volume (mm3, cm3, m3). You will need to modify the OpenAPI yaml file and regenerate
    #  the autogenerated code.
    Box:
      type: object
      description: "provides box dimensions"
      required:
        - width
        - height
        - depth
      properties:
        height:
          type: number
          format: double
          minimum: 0
        width:
          type: number
          format: double
          minimum: 0
        depth:
          type: number
          format: double
          minimum: 0
      example: {
        "width": 50.0,
        "height": 60.0,
        "depth": 70.0
      }

    VolumeResponse:
      type: object
      description: 'response to the volume request'
      required:
        - result
      properties:
        result:
          type: number
          format: double
          description: 'result of the calculation'
      example: {
        "result": 12345.6789
      }

    ErrorResponse:
      type: object
      description: 'error message response'
      required:
        - message
      properties:
        message:
          type: string
          description: 'an error message'
      example: {
        "message": "numerical overflow"
      }